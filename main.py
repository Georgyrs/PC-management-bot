import os
import telebot
import tempfile
from PIL import ImageGrab
import platform
import psutil
import subprocess
import GPUtil
import requests
from bs4 import BeautifulSoup
import wikipedia
from tabulate import tabulate
import random
import time
import sys
import pyAesCrypt
import pyautogui as pg
import threading
import pyaudio
reklama = True
path = 'C:/Users/xxxx'
computer_names = ['–¢–µ–±—è –≥—Ä–∏—Ñ–µ—Ä—è—Ç, —Ç—Ä–æ–ª–ª—è—Ç? –ö—É–ø–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –Ω–∞–∫–∞–∂–∏ –≤—Å–µ—Ö –Ω–µ–Ω–∞–≤–∏—Å—Ç–Ω–∏–∫–æ–≤!', '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –æ–ø–∫—É! –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å, –∫—É–ø–∏ –¥–æ–Ω–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ skybars.net',  '—Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —Ç–≤–æ—è –º–∞–º–∞ –∂–∏–ª–∞ –≤–µ—á–Ω–æ? –ö—É–ø–∏ –¥–æ–Ω–∞—Ç!']
downloadpath = r"C:\Users\xxxx\Downloads"
API_TOKEN = ''
WHITELIST_USERS = ['']
bot = telebot.TeleBot(API_TOKEN)
wikipedia.set_lang('ru')
CITY_NAME = ''
url = "https://rp5.ru/–ü–æ–≥–æ–¥–∞_–≤_–ë–µ–ª–≥—Ä–∞–¥–µ"
url1 = "https://www.accuweather.com/ru/rs/belgrade/298198/hourly-weather-forecast/298198"
urlvalue = "https://www.banki.ru/products/currency/cb/"
response = requests.get(url)
response1 = requests.get(url1)
responseval = requests.get(urlvalue)
soup = BeautifulSoup(response.text, "html.parser")
soupvak = BeautifulSoup(responseval.text, "html.parser")
soupel = soupvak.find("table", {"class": "standard-table standard-table--row-highlight"})
temperature_element = soup.find("span", {"class": "t_0"})
temperature = temperature_element.text.strip() if temperature_element else "N/A"
valuetable = []
is_media_paused = False


table_headers = [ "–í–∞–ª—é—Ç–∞", "–ö—É—Ä—Å"]
formatted_valuetable = tabulate(valuetable, headers=table_headers, tablefmt="plain", floatfmt=".0f")

print(formatted_valuetable)
print(valuetable)
a = "https://rusmeteo.net/weather/loznica-84182/14days/"
so = requests.get(a).text
s = BeautifulSoup(so, 'html.parser')

current_weather = None
for r in s.find_all('div', class_="forecast-14-day"):
    current_weather = r.find('td', class_="precip-line").text.strip()

def get_computer_name():
    return os.environ['COMPUTERNAME'] if os.name == 'nt' else os.uname().nodename

main_menu_markup = telebot.types.InlineKeyboardMarkup(row_width=2)
main_menu_markup.add(
    telebot.types.InlineKeyboardButton(text="–ú–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä", callback_data="my_computer"),
    telebot.types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="other"),
    telebot.types.InlineKeyboardButton(text="–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", callback_data="taskmanager"),
    telebot.types.InlineKeyboardButton(text="–ú–µ–¥–∏–∞", callback_data="media")
)

my_computer_markup = telebot.types.InlineKeyboardMarkup(row_width=1)
my_computer_markup.add(
    telebot.types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—åüì¥", callback_data="shutdown"),
    telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—åüîÑÔ∏è", callback_data="reboot"),
    telebot.types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Çüì®", callback_data="screenshot"),
    telebot.types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤üìÉ", callback_data="list_files"),
    telebot.types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ‚ÑπÔ∏è", callback_data="system_info")
)

other_markup = telebot.types.InlineKeyboardMarkup()
other_markup.add(
    telebot.types.InlineKeyboardButton(text="–ö—É—Ä—Å—ã –≤–∞–ª—é—Çüí±", callback_data="currency_rates"),
    telebot.types.InlineKeyboardButton(text="Wikipedia", callback_data="wiki"),
    telebot.types.InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –ü–öüñ•Ô∏è", callback_data="getfile")
)
taskmanager_markup = telebot.types.InlineKeyboardMarkup()
taskmanager_markup.add(
    telebot.types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å‚ùå", callback_data="kill_process"),
    telebot.types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ü™ü", callback_data="list_processes"),
    telebot.types.InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å‚úÖ", callback_data="run_process")
)
media_markup = telebot.types.InlineKeyboardMarkup()
media_markup.add(
    telebot.types.InlineKeyboardButton(text="–ü–∞—É–∑–∞", callback_data="pause1"),
    telebot.types.InlineKeyboardButton(text="–ü—Ä–∏–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="volumeup1"),
    telebot.types.InlineKeyboardButton(text="–£–±–∞–≤–∏—Ç—å –∑–≤—É–∫", callback_data="volumedown1"),
    telebot.types.InlineKeyboardButton(text="–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫", callback_data="volumeoff1"),
    telebot.types.InlineKeyboardButton(text="–ó–≤—É–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", callback_data="microlisten")
)
@bot.callback_query_handler(func=lambda call: call.data == "my_computer")
def show_my_computer_menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–ú–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä", reply_markup=my_computer_markup)

@bot.callback_query_handler(func=lambda call: call.data == "other")
def show_other_menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–î—Ä—É–≥–æ–µ", reply_markup=other_markup)
@bot.callback_query_handler(func=lambda call: call.data == "taskmanager")
def show_taskmanager_menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á", reply_markup=taskmanager_markup)
@bot.callback_query_handler(func=lambda call: call.data == "media")
def show_taskmanager_menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞", reply_markup=media_markup)
@bot.callback_query_handler(func=lambda call: call.data == "currency_rates")
def fetch_currency_rates(call):
    message = "<b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:</b>\n"
    for row in valuetable:
        currency = row[0]
        rate = float(row[1])
        message += f"<b>[üí¥]:</b> {currency}, <b>‚ÇΩ:</b> {rate:.2f}\n"
    bot.send_message(call.message.chat.id, message, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data == "getfile")
def getfile(call):
    global waiting_for_pid, waiting_for_wiki, waiting_for_run, waiting_for_download
    waiting_for_pid = False
    waiting_for_wiki = False
    waiting_for_run = False
    waiting_for_download = True
    print("Waiting for file upload...")
    bot.send_message(call.message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ñ–∞–π–ª:")
@bot.callback_query_handler(func=lambda call: call.data == "pause1")
def pause(call):
    bot.send_message(call.message.chat.id, "–ú–µ–¥–∏–∞ –Ω–∞ –ø–∞—É–∑–µ!")
    pg.press('playpause')
@bot.callback_query_handler(func=lambda call: call.data == "volumeup1")
def volumeup(call):
    bot.send_message(call.message.chat.id, "–ó–≤—É–∫ –ø—Ä–∏–±–∞–≤–ª–µ–Ω!")
    pg.press('volumeup')

@bot.callback_query_handler(func=lambda call: call.data == "volumedown1")
def volumedown(call):
    bot.send_message(call.message.chat.id, "–ó–≤—É–∫ —É–±–∞–≤–ª–µ–Ω!")
    pg.press('volumedown')
@bot.callback_query_handler(func=lambda call: call.data == "volumeoff1")
def volumeoff(call):
    bot.send_message(call.message.chat.id, "–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω!")
    pg.press('volumemute')

confirm_markup = telebot.types.InlineKeyboardMarkup(row_width=2)
confirm_markup.add(
    telebot.types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_screenshot"),
    telebot.types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_screenshot")
)
@bot.callback_query_handler(func=lambda call: call.data == "run_process")
def run_process(call):
    global waiting_for_pid, waiting_for_wiki, waiting_for_run
    waiting_for_pid = False
    waiting_for_wiki = False  # Reset the flag for Wikipedia search
    waiting_for_run = True
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É:")
@bot.message_handler(commands=['start'])
def send_welcome(message):
    loading_message = bot.send_message(message.chat.id, "‚è≥")
    if str(message.from_user.id) in WHITELIST_USERS:
        bot.delete_message(message.chat.id, loading_message.message_id)
        welcome_message = f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É: {get_computer_name()}.\n\n'
        weather_info = f'–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {CITY_NAME}:\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{temperature}*\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: *{current_weather}*\n\n'
        challenge = random.choice(computer_names)
        bot.send_message(message.chat.id, welcome_message + weather_info + str(challenge), parse_mode="Markdown", reply_markup=main_menu_markup)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")

@bot.callback_query_handler(func=lambda call: call.data == "screenshot")
def send_screenshot_confirmation(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    msg = bot.send_message(call.message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç?", reply_markup=confirm_markup)

wiki_search_in_progress = False

waiting_for_pid = False
waiting_for_wiki = False
waiting_for_run = False
waiting_for_download = False
@bot.callback_query_handler(func=lambda call: call.data == "kill_process")
def kill_process(call):
    global waiting_for_pid, waiting_for_wiki, waiting_for_download
    waiting_for_pid = True
    waiting_for_wiki = False
    waiting_for_download = False
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global waiting_for_pid, waiting_for_wiki, waiting_for_run, path, waiting_for_download
    if waiting_for_pid:
        if message.text.isdigit():
            pid = int(message.text)
            try:
                subprocess.run(["taskkill", "/F", "/PID", str(pid)], check=True)
                bot.send_message(message.chat.id, f'–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.')
            except subprocess.CalledProcessError:
                bot.send_message(message.chat.id, f'–ü—Ä–æ—Ü–µ—Å—Å —Å PID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω.')
            except Exception as e:
                bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}')
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).')
        waiting_for_pid = False
    elif waiting_for_wiki:
        wiki_search(message)
    elif waiting_for_run:
        try:
            process_path = message.text.strip()
            if os.path.isfile(process_path):
                os.startfile(process_path)
                bot.send_message(message.chat.id, f'–ü—Ä–æ—Ü–µ—Å—Å {os.path.basename(process_path)} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
            else:
                bot.send_message(message.chat.id, '–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}')
        waiting_for_run = False
    elif waiting_for_download:
         fileget = bot.get_file(message.document.file_id)
         zagruZka = bot.download_file(fileget.file_path)
         pathget = os.path.join(f'{path}', message.document.file_name)
         with open(pathget, 'wb') as filepc:
              filepc.write(zagruZka)
         bot.send_message(message.chat.id, '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!')
         print('hi')
         waiting_for_download = False
    else:
        print("–û–∂–∏–¥–∞–Ω–∏–µ PID terminate")

def wiki_search(message):
    global waiting_for_wiki
    word = message.text.strip().lower()
    try:
        finalmess = wikipedia.summary(word)
        bot.send_message(message.chat.id, finalmess, parse_mode='html')
    except wikipedia.exceptions.PageError:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    finally:
        waiting_for_wiki = False

@bot.callback_query_handler(func=lambda call: call.data == "wiki")
def ask_for_wikipedia_query(call):
    global waiting_for_wiki
    waiting_for_wiki = True
    waiting_for_pid = False
    waiting_for_run = False# Reset the flag for process termination
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Wikipedia:")

@bot.callback_query_handler(func=lambda call: call.data == "confirm_screenshot")
def send_screenshot(call):
    loadingmsg = bot.send_message(call.message.chat.id, "‚è≥")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    path = tempfile.gettempdir() + 'screenshot.png'
    screenshot = ImageGrab.grab()
    screenshot.save(path, 'PNG')
    bot.send_photo(call.message.chat.id, open(path, 'rb'))
    bot.send_message(call.message.chat.id, "–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=my_computer_markup)
    bot.delete_message(call.message.chat.id, loadingmsg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "shutdown")
def shutdown_system(call):
    loadingmsg = bot.send_message(call.message.chat.id, "‚è≥")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, '–í—ã–∫–ª—é—á–∞—é...')
    os.system("shutdown -s -t 0")
    bot.delete_message(call.message.chat.id, loadingmsg.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "reboot")
def reboot_system(call):
    loadingmsg = bot.send_message(call.message.chat.id, "‚è≥")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
    if platform.system() == 'Windows':
        os.system('shutdown /r /t 1')
    elif platform.system() == 'Linux':
        os.system('reboot now')
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=my_computer_markup)

@bot.callback_query_handler(func=lambda call: call.data == "list_files")
def request_directory(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:')
    bot.register_next_step_handler(call.message, list_files)

def list_files(message):
    directory_path = message.text.strip()
    files = os.listdir(directory_path)
    files_list = "\n".join(files)
    bot.send_message(message.chat.id, f'–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory_path}:\n{files_list}')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=my_computer_markup)

@bot.callback_query_handler(func=lambda call: call.data == "system_info")
def system_info(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    system_info_str = f'–û–°: {platform.system()} {platform.release()}\n'
    system_info_str += f'–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}\n'
    system_info_str += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {psutil.cpu_count(logical=False)}\n'

    svmem = psutil.virtual_memory()
    system_info_str += f'–û–±—â–∏–π –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏: {svmem.total / (1024 ** 3):.2f} GB\n'
    system_info_str += f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {svmem.used / (1024 ** 3):.2f} GB\n'
    system_info_str += f'–°–≤–æ–±–æ–¥–Ω–æ –ø–∞–º—è—Ç–∏: {svmem.available / (1024 ** 3):.2f} GB\n'

    gpus = GPUtil.getGPUs()
    for i, gpu in enumerate(gpus):
        system_info_str += f'GPU {i+1}:\n'
        system_info_str += f'    –ù–∞–∑–≤–∞–Ω–∏–µ: {gpu.name}\n'
        system_info_str += f'    –ó–∞–≥—Ä—É–∑–∫–∞: {gpu.load * 100:.2f}%\n'
        system_info_str += f'    –ü–∞–º—è—Ç—å: {gpu.memoryTotal:.0f}MB / {gpu.memoryUsed:.0f}MB\n'

    partitions = psutil.disk_partitions()
    for partition in partitions:
        partition_usage = psutil.disk_usage(partition.mountpoint)
        system_info_str += f'–î–∏—Å–∫ {partition.device}:\n'
        system_info_str += f'    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {partition_usage.used / (1024 ** 3):.2f} GB\n'
        system_info_str += f'    –°–≤–æ–±–æ–¥–Ω–æ: {partition_usage.free / (1024 ** 3):.2f} GB\n'

    bot.send_message(call.message.chat.id, system_info_str)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=my_computer_markup)

@bot.callback_query_handler(func=lambda call: call.data == "list_processes")
def list_processes(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    processes = []
    for proc in psutil.process_iter(['pid', 'name']):
        processes.append((proc.info['pid'], proc.info['name']))

    processes_list = "\n".join([f"üîÑ PID: {pid}\n    üîß Name: {name}" for pid, name in processes])

    chunk_size = 4096
    for chunk in [processes_list[i:i + chunk_size] for i in range(0, len(processes_list), chunk_size)]:
        bot.send_message(call.message.chat.id, chunk)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=taskmanager_markup)



bot.polling()
